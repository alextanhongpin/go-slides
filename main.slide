# HTTP Snapshot Testing
Testing made simple with snapshot
4 Jun 2023
Tags: go, httptest, handler
Summary: how to perform snapshot testing with go


Alex Tan Hong Pin
Sofware Engineer
alextan220990@gmail.com
https://alextanhongpin.github.io/


## Agenda

- Goal and Motivation
- Key concepts of Snapshot Testing
	- What is Snapshot Testing?
	- How does Snapshot Testing works?
- Dump Format
- Basic Example
- Advanced Example


## Goal and Motivation

To write simple and maintainable tests that also serves as documentation


## Key Concepts of Snapshot Testing

## What is Snapshot Testing?

Snapshot testing is a type of testing that compares the current output of a component or application to a known good output.
- Snapshot tests are typically used for UI testing, but can also be used for other types of testing.
- Snapshot tests are easy to write and maintain, and can help to prevent regressions in your code.
- Snapshot tests are not a replacement for unit or functional tests, but can be used in conjunction with them to provide a comprehensive testing suite.


## How does Snapshot Testing works?

- Snapshot tests are typically written using a special syntax that allows you to capture the output of a component or application.
- The captured output is then stored in a file, which is compared to the output of the component or application during each test run.
- If the output of the component or application changes, the snapshot test will fail.
- This helps to ensure that the output of your component or application does not change unexpectedly, which can help to prevent regressions.

## Dump Format


To come up with a dump format, we need to fulfil the following criteria

- human-readable
- diff-friendly
- interpretable


Proposed format:
- `json` for structs (with public fields)
- `.http` (dot HTTP) for request/response


## JSON Format

JSON Dump:

.code asset/snippets/jsondump.json

Useful for inspecting body, but does not provide much context.


## Dot HTTP Format

Request/Response Dump:

.code asset/snippets/httpdump.http

: Has request/response line
: Request has full url query string
: Response has status code
: Has request/response body
: Has request/response headers

## JSON - Diff

.code asset/snippets/jsondump_diff.txt


## Dot HTTP - Diff

.code asset/snippets/httpdump_diff.txt


## Basic Example

## Echo Handler

.code asset/snippets/httpdump_basic_test.go /^type Echo/,/\}/

.code asset/snippets/httpdump_basic_test.go /^func echo/,/^\}/


## Echo Handler - Test

.code asset/snippets/httpdump_basic_test.go /^func TestEchoHandler/,/^\}/

## Echo Handler - Test Output

`testdata/TestEchoHandler.http`:

.code asset/snippets/testdata/TestEchoHandler.http


## Echo Handler - Code Changes

What happens if we change the message from `hello world` to `hello, go`?

.code asset/snippets/handler_change.txt


## Echo Handler - Diff Output

We will see the diff:

.code asset/snippets/handler_diff.txt


## Advance Example

## Advance Topic

- handler with dependencies
- handling non-deterministic fields
  - id generation
  - timestamp
  - random number
- testing middleware
  - injecting context
  - decorating handler
- dumping external calls

## Handler with dependencies


`LoginController`:

.code asset/snippets/httpdump_advance_test.go /^type LoginController/,/\}/

has a `loginUsecase` dependency:

.code asset/snippets/httpdump_advance_test.go /^type loginUsecase/,/\}/



##

`PostLogin` method:

.code asset/snippets/httpdump_advance_test.go /^func \(ctrl \*LoginController/,/^\}/


## Mocking dependencies - Setup

When unit testing layers, treat the layer below as black-box.

In short, we will mock the dependencies.

.code asset/snippets/httpdump_advance_test.go /^type mockLoginUsecase/,/^\}/


We can write the mock manually, or use tools like [https://vektra.github.io/mockery/](https://vektra.github.io/mockery/).


## Mocking dependencies - Goal

We will validate the args, and stub the result and error.

We also check if the method is only invoked once.

.code asset/snippets/httpdump_advance_test.go /^func \(uc \*mockLoginUsecase/,/^\}/

## Login Handler - Success

- dump the request/response
- validate the args for the usecase

.code asset/snippets/httpdump_advance_test.go /^func TestLoginHandlerSuccess/,/^\}/

## Login Handler - Output

.code asset/snippets/testdata/TestLoginHandlerSuccess.http

## Login Handler - Failed

Use `errors.Is` to compare error. This ensures that the branch is really covered.

.code asset/snippets/httpdump_advance_test.go /^func TestLoginHandlerFailed/,/^\}/


## Login Handler - Output

.code asset/snippets/testdata/TestLoginHandlerFailed.http


## Handling non-deterministic output

Non-deterministic output will break the snapshot.

Examples:
- uuid generation
- timestamps
- random number generator

In the code, this is how it will look like:

.code asset/snippets/httpdump_non_deterministic_test.go /u :=/,/}/

## Handling non-determistic output - Output

.code asset/snippets/testdata/TestRegisterHandler.http

## Handling non-determistic output - Diff

Re-running tests will lead to errors ðŸ˜±:

.image ./asset/snippets/non-deterministic.png _ 640


## Dealing with non-determistic output

Two options:

- use a fixed value (not always viable ðŸ˜©)
- ignore the field ðŸ˜ˆ


## Ignore the field

To ignore JSON fields, use `testutil.IgnoreFields`:

.code asset/snippets/httpdump_non_deterministic_test.go /func Test/,/IgnoreFields/

To ignore headers, use `testutil.IgnoreHeaders` ðŸ¤—.

## Inspecting response body


Sometimes, it is necessary to still validate the fields rather than just ignoring them.

We can inspect the body and do custom validation. For example, we may want to validate if the `id` returned is indeed a `uuid`:

.code asset/snippets/httpdump_non_deterministic_test.go /DumpHTTP/,/\}\),/


## Inspecting response headers

We can also do the same with headers using `testutil.InspectHeaders`:

.code asset/snippets/httpdump_non_deterministic_test.go /InspectHeaders/,/\}\),/

## Summary

## What we can achieve with snapshot testing

With snapshot testing
- we can test and document our HTTP handlers
- we don't need to write manual assertions (except for non-deterministic value)
- we can easily test against regression
- we can easily visualize diffs in the request/response
- we write less code

> The less code we write, the less we will have to refactor, the less we will have to read, and the less will have to test.


## What's next?

Bringing snapshot testing to Backend:

- snapshot testing for gRCP and graphql?
- snapshot testing for SQL?
- snapshot testing for message queue?

## Useful Tips

## gotest

Color your test output with [https://github.com/rakyll/gotest](https://github.com/rakyll/gotest).

.image ./asset/snippets/gotest.png _ 640


However, it doesn't have highlight the `+/-` ðŸ˜”.

## grc - generic colouriser

How to setup it [here](https://github.com/alextanhongpin/go-learn/blob/master/test-color.md#harder).

.image ./asset/snippets/grc.png _ 640

## httpyac


The `.http` files are actually executable if you install the [httpYac](https://marketplace.visualstudio.com/items?itemName=anweber.vscode-httpyac) or [Rest Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) extension on VS Code.


The [httpYac](https://httpyac.github.io/) client has the advantage that it can be run as CLI.

.image ./asset/snippets/httpyac.gif _ 640
